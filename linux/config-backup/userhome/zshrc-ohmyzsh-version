unalias -a

#---pre-load env file
[[ -r ~/.shell.env.preload ]] && source ~/.shell.env.preload

os=$(uname)
user=$(whoami)

#===== ZSH configs =====
#--- $ZSH path
if [[ -n $ZSH ]]; then
  echo "ZSH is already set to $ZSH"
elif [[ -d ~/.oh-my-zsh ]]; then
  export ZSH=~/.oh-my-zsh
elif [[ -d /usr/share/oh-my-zsh ]]; then
  export ZSH=/usr/share/oh-my-zsh
  ZSH_DISABLE_COMPFIX=true
  DISABLE_AUTO_UPDATE="true" # disable bi-weekly auto-update checks.
  [[ -d /usr/share/zsh/plugins ]] && export ZSH_CUSTOM=/usr/share/zsh
fi

mkdir -p ~/.oh-my-zsh-cache

#--- zsh & oh-my-zsh settings
# theme
ZSH_THEME="ys" #ys" #"fino-time" #"random"
#ZSH_THEME_RANDOM_CANDIDATES=(frisk ys re5et tjkirch linuxonly bureau candy fino-time strug steeef dstufft rkj-repos peepcode)

# CASE_SENSITIVE="true"

# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=33

# if pasting URLs and other text is messed up.
DISABLE_MAGIC_FUNCTIONS=true

# disable colors in ls.
# DISABLE_LS_COLORS="true"

# disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# enable command auto-correction.
# ENABLE_CORRECTION="true"

# display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# disable marking untracked files under VCS as dirty, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd", see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# load plugins.They can be found in $ZSH/plugins/*
plugins=(z zsh-interactive-cd zsh-syntax-highlighting zsh-autosuggestions colored-man-pages)

#---shell history
HISTSIZE=2333
SAVEHIST=2333
alias history='history -i'
alias history_all='history -i -$HISTSIZE' #history -15  #in bash: history 15

#=== Compatible with the operation habits of bash
#---shortcus
bindkey \^U backward-kill-line   #ctrl u (tip: ctrl k forwards-kill-line)
bindkey '^[OH' beginning-of-line #ctrl a
bindkey '^[OF' end-of-line       #ctrl e
bindkey '^[[3~' delete-char      #ctrl h

#---operation style compatibility
autoload -U +X bashcompinit && bashcompinit 2>/dev/null
autoload -Uz compinit && compinit 2>/dev/null
autoload -U select-word-style
select-word-style bash
setopt no_nomatch #no error when no match
zstyle ':completion:*:scp:*' tag-order '! users'

[[ -f $ZSH/oh-my-zsh.sh ]] && source $ZSH/oh-my-zsh.sh

#===== functions for config files =====
function create_config_file_symbols() {
  comm_home_backup_dir=~/Documents/it/itnotes/linux/config-backup/userhome
  private_home_backup_dir=~/Documents/os-config/home.config
  confs_in_home_common=(.tmux.conf .condarc .zlogout .zshrc .gitignore_global .vimrc .makepkg.conf)
  confs_in_home_private=(.gitconfig .ssh/id_ed25519 .ssh/id_ed25519.pub .ssh/config)

  for conf in ${confs_in_home_common[*]}; do
    [[ -f $comm_home_backup_dir/$conf ]] && ln -sfv $comm_home_backup_dir/$conf ~/$conf
  done
  for conf in ${confs_in_home_private[*]}; do
    [[ -f $private_home_backup_dir/$conf ]] && ln -sfv $private_home_backup_dir/$conf ~/$conf
  done
}

function backup_pkgs() {
  if [[ -n $(command -v brew) ]]; then
    brew bundle dump --describe --force --file=~/Documents/os-config/macos/brew-bundle-backup
    echo "[tip] reinstall macos apps from backupfile"
    echo -e "1. install brew and 'brew install mas' (optional) \n2. execute "brew bundle --file=$homebrew_backup_file" "
  fi
}

#===== vim & neovim =====
#pacman -S vim-plugin --no-comfirm
alias vimplugup="[[ -f ~/.vim/autoload/plug.vim ]] && vim -c 'PlugUpgrade' -c 'PlugInstall' -c 'PlugUpdate' -c 'q' -c 'q'"
alias vimpluginstall="curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \rm -rfv ~/.vim/autoload/plugin.vim.old && vimplugup"

export EDITOR=vim
command -v vim &>/dev/null && alias vi=vim

#---neovim
alias nvimpluginstall='mv ~/.config/nvim{,.bak} ; mv ~/.local/share/nvim{,.bak} ; mv ~/.local/state/nvim{,.bak} ; mv ~/.cache/nvim{,.bak} ; git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1 && nvim'
if [[ -n $(command -v nvim) ]]; then
  export EDITOR=nvim
  alias vi=nvim
  alias vim=nvim
  alias vimdiff='exec nvim -d ' # "$@
  alias ex='exec nvim -e '      # "$@"
  alias rview='exec nvim -RZ '  # "$@"
  alias rvim='exec nvim -Z '    # "$@"
  alias view='exec nvim -R '    # "$@"
  alias nvimupdate='nvim -c "NvChadUpdate" -c "normal U"'
fi

#===== package manager =====
if [[ $os == Darwin ]]; then
  function brew_taps() {
    brew tap --custom-remote --force-auto-update homebrew/cask-versions https://mirrors.ustc.edu.cn/homebrew-cask-versions.git
    brew tap beeftornado/rmtree
    brew tap buo/cask-upgrade
    brew tap homebrew/bundle
    brew tap homebrew/cask-fonts
  }
  export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
  export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.ustc.edu.cn/homebrew-core.git"
  export HOMEBREW_NO_AUTO_UPDATE=true
  alias i="brew install"
  alias r="brew uninstall"
  alias s="brew search"
  alias pkg_query_update='brew outdated'
  alias pkgclean='brew cleanup'
  alias finderplugin='brew install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize qlvideo webpquicklook' #suspicious-package suspicious-package quicklook-pat provisionql quicklookase

  alias up='brew cu -ay --no-brew-update ; brew update -v ; brew upgrade -g; ohmyzsh_upgrade' # mas upgrade # && brew doctor
elif [[ $(command -v pacman) ]]; then
  [[ $user != root ]] && alias pacman='sudo pacman'
  alias i="pacman -S"
  alias r="pacman -Rscn"
  command -v paru &>/dev/null && alias s="paru --bottomup" || alias s="pacman -Ss"
  alias orphan='pacman -Rscn $(pacman -Qtdq)'
  alias pkgclean='orphan && paccache -rk 2 2>/dev/null'
  alias pkg_query_update='pacman -Sy && pacman -Qu'
  alias up='if command -v paru; then paru -Syu; else pacman -Syu; fi ; pkgclean ; ohmyzsh_upgrade'
  alias paru='paru --bottomup'
  #makepkg aur
  alias aurinfo='updpkgsums && makepkg --printsrcinfo > .SRCINFO ; git status && echo ----git add -u---'
elif [[ $(command -v apt) ]]; then
  [[ $user != root ]] && alias apt='sudo apt'
  function clean_oprhan_debs() {
    while true; do
      [[ -z $(deborphan) ]] && break
      apt purge $(deborphan)
    done
  }
  alias i="apt install"
  alias r="apt purge"
  alias s="apt search"
  alias orphan='[[ -n $(command -v deborphan) ]] && clean_oprhan_debs || echo "deborphan not installed"'
  alias pkgclean='apt autoremove && apt autoclean && orphan'
  alias pkg_query_update='apt update && apt list --upgradable'
  alias up='apt update && apt dist-upgrade && ohmyzsh_upgrade'
fi

#=====utility=====
#---uncategorized commands
alias tmquickly='sudo sysctl debug.lowpri_throttle_enabled=0'
alias tmlistsnap='tmutil listlocalsnapshotdates'
alias tmlistbackups='tmutil listbackups'
alias tmrmsnap=' tmutil deletelocalsnapshots '
alias tmrmbackup='sudo tmutil delete '
alias temp='sudo powermetrics ... --samplers smc'
alias battery='ioreg -rn AppleSmartBattery |\grep -i capacity |grep -iE ".+=.+[0-9]+$"'
alias trim='sudo fstrim -v /home && sudo fstrim -v /'
alias logclean='sudo journalctl --vacuum-time=1weeks'

if [[ $user != root ]]; then
  alias systemctl='sudo systemctl'
  alias firewall-cmd='sudo firewall-cmd'
fi

function cleancache() {
  pkgclean
  id | grep -Ew "wheel|sudo|root" && echo "clean packages cache" && pkgclean
  echo "clean zsh rubbish files..."
  \ls -1 .zcompdump-* | while read line; do
    [[ -z $(echo $line | grep -E "$ZSH_VERSION") ]] && \rm -fv $line
  done
}

#---temporary locale
#localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
export LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
alias sc='export LANG=zh_CN.UTF-8 LC_CTYPE=zh_CN.UTF-8 LC_MESSAGES=zh_CN.UTF-8'
alias tc='export LANG=zh_TW.UTF-8 LC_CTYPE=zh_TW.UTF-8 LC_MESSAGES=zh_TW.UTF-8'
alias en='export LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8'

#---file operations
alias scp='scp -r'
alias ll='ls -lh'
alias la='ls -lah'
alias cp='cp -iv'
[[ -n $(command -v rsync) ]] && alias cp='echo "---cp is directed to an rsync command alias---" && rsync -av --progress --human-readable "$@"'
alias grep='grep --color'
alias tree='tree -C -L 1 --dirsfirst'
alias iconvgbk='iconv -f GBK -t UTF-8'                      #iconv -- file content encoding
alias convmvgbk='convmv -f GBK -t UTF-8 --notest --nosmart' #convmv -- filename encoding

#gio for trash
if [[ -n $(command -v gio) && -n $XDG_CURRENT_DESKTOP ]]; then
  alias trashclean='gio trash --empty'
  alias rm='echo "[tip] rm is an alias for [gio trash], it will move file to Trash" && gio trash '
  alias trash='gio trash '
  alias trashlist='echo "[tip] use gio trash --restore to restore a file" && echo "---~/.local/share/Trash---" && ls ~/.local/share/Trash/files'
  alias trashclean='rm -rf ~/.local/share/Trash/*'
fi

#tar + compress/uncompress
#eg tar -acvf xx.tar.zst xx ,compression type suffix is needed
alias tarc="tar --exclude='.DS_Store' -acvf "
alias tarx='tar -xvf '

function dos2unix_all() {
  local dirpath=${1:-$(pwd)}
  dos2unix $dirpath/*
  \ls -1 | while read line; do
    [[ -d $dirpath/$line ]] && dos2unix_all $dirpath/$line
  done
}

#---.git nosync for icloud
function git_init_nosync_icloud() {
  git init . && mv .git .git.nosync && ln -s .git.nosync .git
  touch .gitignore
  grep ".git.nosync" .gitignore || echo ".git.nosync" >>.gitignore
  grep ".DS_Store" .gitignore || echo ".DS_Store" >>.gitignore
  ls -1a | grep .git
}

function nosync_git_icloud() {
  local dirpath=$1
  if [[ ! -d $dirpath ]]; then
    echo "dirpath $dirpath not exist or not a directory, usage: nosync_git <dirpath>"
    return 1
  fi
  find $dirpath -type d -name ".git" | while read sub_dirpath; do
    mv -v $sub_dirpath{,.nosync}
    ln -s ${sub_dirpath}.nosync $sub_dirpath
  done
  unset sub_dirpath
}

#---network---
alias ipv6='curl -s 6.ipw.cn'
alias ipv4='curl -s 4.ipw.cn'
alias ip_4_6_prefer='curl test.ipw.cn'
alias myip='curl cip.cc && echo && echo IPv6: $(ipv6 || echo noIPv6)' #ident.me v6.ident.me
alias myip_json='curl ipinfo.io'
alias ping='ping -c 4'

#---proxy
#alias shell_proxy='export ALL_PROXY="http://127.0.0.1:8010"'
alias shell_proxy='export ALL_PROXY="socks5h://127.0.0.1:1080"'
export NO_PROXY="localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
export PROXYCHAINS_SOCKS5_HOST="127.0.0.1"
export PROXYCHAINS_SOCKS5_PORT="1080"

if [[ $os == Darwin ]]; then
  export PROXYCHAINS_CONF_FILE=/usr/local/etc/proxychains.conf
  alias px='proxychains4 -q'
  alias netinfo='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I'
#  socat -T 600 TCP4-LISTEN:8080,fork TCP4:10.1.5.100:8080
elif [[ $os == Linux ]]; then
  export PROXYCHAINS_CONF_FILE=/etc/proxychains.conf
  alias px='proxychains -q'
  alias netinfo='nmcli con'
fi

#---tmux
#export TMUX_TMPDIR=/tmp #/tmp is default

#---find
alias f='find . -name '
alias rm_macos_ds_store='find . -name "*.DS_Store" -delete'

#---fzf
if [[ -r /usr/share/fzf/completion.zsh ]]; then
  source /usr/share/fzf/completion.zsh
  source /usr/share/fzf/key-bindings.zsh
elif [[ -r ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh
fi
alias fzfv="fzf --preview 'cat {}'"

#---nmap
#scan alive hosts
alias 'nmap-ports'="sudo nmap -sS "
alias 'nmap-hosts'="nmap -sP --system-dns ${gateway%.*}.0/24"
alias 'nmap-os'="sudo nmap -O --system-dns ${gateway%.*}.0/24"

#qrcode -t utf8 -o - $(cat file.txt)
alias qrcode='qrencode -t ansiutf8 -o - ' #qrencode -t ansiutf8 -o - "http://www.bing.com"

#asciinema record terminal
alias rec='asciinema rec -i 5 terminal-`date +%Y%m%d-%H%M%S`' #record
alias play='asciinema play'                                   #play record file

alias starwar='telnet towel.blinkenlights.nl'

#---中文古诗词---
function fortune_gushici() {
  if [[ $(command -v brew) ]]; then
    command -v fortune || brew install fortune
    git clone https://github.com/ruanyf/fortunes.git /tmp/fortune
    \cp -av /tmp/fortune/data/{tang*,song*} /usr/local/Cellar/fortune/9708/share/games/fortunes
  elif [[ $(command -v pacman) ]]; then
    command -v fortune || pacman -S fortune-mod --noconfirm
    # sudo \cp -av /tmp/fortune/data/{tang*,song*} /usr/share/fortune/
    echo | paru -S fortune-mod-zh-hant --skipreview
  fi
}

#===== dev env =====
dev_dir="$HOME/Public/dev"
dev_env_path=$HOME/Public/dev/env
dev_configs_path=$dev_dir/configs
dev_proj_path=$dev_dir/proj
alias dev="cd $dev_dir"
alias proj="cd $dev_proj_path"

#---nvm
export NVM_DIR="$dev_env_path/nvm"
[[ -z "$NVM_DIR" ]] && export NVM_DIR="$HOME/.nvm"

if [[ -s /usr/local/opt/nvm/nvm.sh ]]; then
  source /usr/local/opt/nvm/nvm.sh
  source /usr/local/opt/nvm/etc/bash_completion.d/nvm
elif [[ -s /usr/share/nvm/init-nvm.sh ]]; then
  source /usr/share/nvm/init-nvm.sh
  source /usr/share/nvm/bash_completion
  source /usr/share/nvm/install-nvm-exec
fi

#---npm
alias npmlistg='npm -g list --depth=0'
alias npmupg='npm -g upgrade'
alias npmmirrorchina='npm config set registry http://mirrors.cloud.tencent.com/npm/'
#alias npmmirrorchina='npm config set registry=http://mirrors.cloud.tencent.com/npm/'

#---python
alias python=python3
alias pip=pip3
alias pipmirrorchina='pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple'
#'pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple'
alias pipoutdated='pip list --outdated'
alias pipupgrade='pip install --upgrade $(pip list --outdate 2>/dev/null |sed -n "3,$ p"|cut -d " " -f 1)'
alias pydev='source ~/.virtualenvs/dev/bin/activate'
alias pip_install_from_list='pip3 install -r pip.list --no-index --find-links=.'

#---conda
if [ -r "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
  . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
elif [ -r "/opt/miniconda/etc/profile.d/conda.sh" ]; then
  source "/opt/miniconda/etc/profile.d/conda.sh"
fi
# prevent auto active conda env, execute:
# conda config --set auto_activate_base false
alias condaclean='conda clean -ady'

#---jupyter lab
# show env: jupyter --path
export JUPYTERLAB_DIR=$dev_dir/jupyter
export JUPYTER_RUNTIME_DIR=$HOME/.local/share/jupyter/runtime #--runtime-dir
export JUPYTER_DATA_DIR=$HOME/.local/share/jupyter            #--data-dir
# export JUPYTER_CONFIG_DIR=

#----golang
export GOPROXY=https://goproxy.cn
export GOPATH=$dev_env_path/go #default is ~/go
export PATH=$GOPATH/bin:$PATH
export GOROOT=$(go env GOROOT 2>/dev/null)

#---rust
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
export RUSTUP_HOME="$dev_env_path/rust/rustup"
export CARGO_HOME="$dev_env_path/rust/cargo"
export RUSTBINPATH="$CARGO_HOME/bin"

#---flutter
export FLUTTER_HOME=$dev_env_path/flutter
export PATH=$FLUTTER_HOME/bin:$PATH
export PUB_HOSTED_URL="https://pub.flutter-io.cn"
export FLUTTER_STORAGE_BASE_URL="https://storage.flutter-io.cn"
# export PUB_HOSTED_URL=https://mirror.sjtu.edu.cn/flutter-infra
# export FLUTTER_STORAGE_BASE_URL=https://mirror.sjtu.edu.cn

#---specify $PATH
if [[ $os == Darwin ]]; then
  export PATH="/usr/local/sbin:/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
fi

#---environment module
if [[ -r /usr/local/opt/modules/init/zsh ]]; then
  source /usr/local/opt/modules/init/zsh
elif [[ -r /usr/share/modules/init/zsh ]]; then
  source /usr/share/modules/init/zsh
fi
[[ -d $dev_dir/modulefiles && $(command -v module) ]] && module use $dev_dir/modulefiles

#---ssh-agent
# function check_ssh_agent() {
#   if [[ -z $(ps -eo pid,user,command | grep -w $USER | grep "ssh-agent" | grep -v grep) ]]; then
#     eval $(ssh-agent -s)
#     echo "export SSH_AGENT_PID=$SSH_AGENT_PID" >~/.ssh-agent.env
#     echo "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >>~/.ssh-agent.env
#     [[ -f ~/.ssh/id_rsa ]] && ssh-add ~/.ssh/id_rsa
#   else
#     [[ -f ~/.ssh-agent.env ]] && source ~/.ssh-agent.env
#   fi
# }

#===== ohmyzsh install & upgrade functions ===
function ohmyzsh_install() {
  if [[ -n $(command -v pacman) ]]; then
    pacman -S --noconfirm oh-my-zsh-git zsh zsh-autosuggestions zsh-completions zsh-lovers zsh-syntax-highlighting
  else
    [[ -f ~/.zshrc ]] && cat ~/.zshrc >/tmp/zshrc
    git clone https://mirrors.tuna.tsinghua.edu.cn/git/ohmyzsh.git
    cd ohmyzsh/tools
    REMOTE=https://mirrors.tuna.tsinghua.edu.cn/git/ohmyzsh.git
    sh install.sh
    git -C $ZSH remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/ohmyzsh.git
    git -C $ZSH pull
    \rm -rf ohmyzsh
    #custom plugins
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
    cat /tmp/zshrc >~/.zshrc
    cd -
  fi
}

function ohmyzsh_upgrade() {
  local curdir=$PWD
  if [[ $ZSH == ~/.oh-my-zsh ]]; then
    cd $ZSH_CUSTOM/plugins/zsh-syntax-highlighting && git pull &
    cd $ZSH_CUSTOM/plugins/zsh-autosuggestions && git pull &
    omz update &
  fi
  cd $curdir
}

#===== welcom msg =====
echo -e "+++ $HOST : $(uname -rsm) +++\n\e[1;36m@$(date)\e[0m"

function display_network_info() {
  if [[ $os == Linux && -n $(command -v ip) ]]; then #iproute
    local default_gw=$(ip r | grep default | head -n 1 | grep -Po "(?<=via ).+(?= dev)")
    ip -4 -br a | grep -vE "lo|169.254" | while read ip_info; do
      local interface=$(echo $ip_info | cut -d " " -f 1)
      local ip=$(echo $ip_info | grep -Eow "[0-9.]+/[0-9]{1,2}")
      [[ -z $ip ]] && continue
      local gw=$(ip r | grep $interface | head -n 1 | grep -Po "(?<=via ).+(?= dev)")
      [[ -z $gw ]] && gw="..."
      network_info="$interface: $gw  <--  $ip\n""$network_info"
    done
    echo -e "default gateway: \e[1;35m$default_gw\e[0m"
    echo -e "\e[31m$(echo "$network_info" | column -t)\e[0m"

  elif [[ -n $(command -v ifconfig) ]]; then #net-tools (ifconfig)
    local innerips=$(ifconfig | grep inet | grep -vE "inet6|127.0.0.1" | grep -v 169.254 | cut -d " " -f 2)
    for innerip in ${innerips[@]}; do network_info="$network_info""$ip\n"; done
    for interface in $(ifconfig -lu); do
      [[ $interface == lo0 ]] && continue
      local network_info=$(ifconfig $interface | grep -w inet | awk -v interface=$interface '/inet6?/{print interface": "$2}')"\n$network_info"
    done
    local gateway=$(netstat -rn | grep "default" | awk '{print $2}' | head -n 1)
    echo -e "gateway:\e[3;35m" $(echo $gateway)"\e[0m\n\e[31m$(echo "$network_info" | sed -E -e "/^$/d" -e "s/\t/\s/g")\e[0m"
  fi
}
display_network_info

#---fortune
echo
if [[ -n $(command -v fortune) ]]; then
  if [[ $os == Darwin ]]; then
    fortune song100 tang300 2>/dev/null
  else
    fortune chinese-hant song100-hant tang300-hant 2>/dev/null
  fi
fi
echo

if [[ -n $(command -v ccal) ]]; then
  ccal -u
elif [[ -n $(command -v cal) ]]; then
  cal -m
fi

#---pkg update check
if [[ -f ~/.cache/pkg_last_update ]]; then
  pkg_last_update=$(cat ~/.cache/pkg_last_update)
  if [[ $(date +%s) -gt $((pkg_last_update + 3 * 24 * 3600)) ]]; then
    pkg_query_update &
    echo $(date +%s) >~/.cache/pkg_last_update
  fi
else
  echo $(date +%s) >~/.cache/pkg_last_update
fi

#only for auto login from bash to prevent load this file looply
alias bash='export onlybash=true;bash '
#item2
test -e ~/.iterm2_shell_integration.zsh && source ~/.iterm2_shell_integration.zsh || true

#===== post load scripts =====
test -r ~/.shell.env.postload.sh && source ~/.shell.env.postload.sh || true
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/.local/lib/mojo
export PATH=$PATH:~/.modular/pkg/packages.modular.com_mojo/bin/
