#!/bin/bash
unalias -a
set -e
#-----
install_dir=/usr/local/bin
jail_file=/etc/fail2ban/jail.d/jail.local
jails=(sshd mongodb-auth mysqld-auth vsftpd)
default_jail=(sshd)
logpath=''

bandtime=360000 #被屏蔽的时间,默认秒s无须写出 其他可用单位m h d w
findtime=3600   #多少时间内同一ip出现失败尝试记录会被屏蔽，默认秒s无须写出 其他可用单位m h d w
maxretry=5      #连续在findtime时间内尝试maxretry次则ban掉，默认5次

#-----
if [[ $(id -u) -ne 0 ]]; then
  echo "need root or sudo." && exit 126
fi

sudo='sudo'
[[ $(command -v sudo) ]] || sudo=''

function install_fail2ban() {
  if [[ -n $(command -v pacman) ]]; then
    pacman -Syy fail2ban --noconfirm
  elif [[ -n $(command -v yum) ]]; then
    yum install -y epel-release && yum makecache
    yum install -y fail2ban
  elif [[ -n $(command -v apt) ]]; then
    apt update -y
    apt install -y fail2ban
  else
    echo "not support package manager, please install fail2ban"
    exit 1
  fi
  systemctl enable --now fail2ban
}

function add_vnc_auth_filter() {
  echo "[Definition]
failregex = authentication failed from <HOST>
ignoreregex =" >/etc/fail2ban/filter.d/vnc-auth.conf
}

function gen_jail_file() {
  [[ -f $jail_file ]] && cp -fv $jail_file $jail_file.bak

  echo "[DEFAULT]
bantime = $bandtime
findtime = $findtime
maxretry = $maxretry
" >$jail_file
}

function services_logpath() {
  case $1 in
  # mongodb-auth)
  #  echo "/var/log/mongodb/mongod.log"
  #   ;;
  *)
    echo ''
    ;;
  esac
}

function add_jails() {
  echo "$(tput bold)Select filter service：$(tput sgr0)"
  local i=0
  for jail in ${jails[*]}; do
    echo "$i) $jail $([[ $i -eq 0 ]] && echo [default])"
    i=$((i + 1))
  done

  echo "-------------"
  read selected_jails
  echo "---selected jails: ${selected_jails[*]}"

  [[ "$selected_jails" ]] || selected_jails='0'

  for select_jail in $selected_jails; do
    local cur_jail_name=${jails[$select_jail]}
    [[ $cur_jail_name ]] || continue

    local cur_jail_log_path=$(services_logpath $cur_jail_name)
    local log_line=""
    [[ -n $cur_jail_log_path ]] && log_line="logpath = $cur_jail_log_path"

    echo "[$cur_jail_name]
      enabled = true
      backend=systemd
      "$log_line"
    " >>$jail_file
  done

  systemctl restart fail2ban
}

function gen_scripts() {
  local scripts=(banip unbanip addignoreip delignoreip)

  cd /tmp
  for script_name in ${scripts[*]}; do
    echo "#!/bin/bash
    #generated by fail2ban-config.sh at $(date +%F_%T)
    set -eu
    unalias -a
    action=${script_name}
    " >$script_name

    echo '
    [[ $(whoami) != "root" && -n $(command -v sudo) ]] && sudo=sudo || sudo=""

    jail_list=$($sudo fail2ban-client status | grep -i 'list:' | cut -d ":" -f 2 | sed -E "s/\s//g")

    function usage() {
        echo "Usage: $(basename $0) [options] [arguments]"
        echo "e.g. $(basename $0) -j sshd -i 1.1.1.1,2.2.2.2"
        echo "e.g. $(basename $0) -i 1.1.1.1,2.2.2.2"
        echo "e.g. $(basename $0) 1.1.1.1,2.2.2.2"
        echo "Options:"
        echo "  -h, --help                               Show this help"
        echo "  -j, --jail, --jails <jail1[,jail2,...]>  Jail(s) , default: all"
        echo "  -i, --ip, --ips <ip1[,ip2,...]>          IP address(es) to add"
        exit 0
    }

    [[ $# -eq 0 ]] && usage

    jails="all"
    ips=""

    #short option with : means it has an argument
    args=$(getopt -a -o "hj:i:" -l "help,jail:,jails:,ip:,ips:," -n "$(basename $0)" -- "$@")
    eval set -- "$args"
    while true; do
        case "$1" in
        -j | --jail | --jails)
            jails=$2 && shift 2
            ;;
        -i | --ip | --ips)
            ips=$2 && shift 2
            ;;
        -h | --help)
            usage 
            ;;
        --)
            shift && break
            ;;
        *)
            echo "Invalid option: $1" && exit 1
            ;;
        esac
    done

    [[ -z $ips ]] && ips="$@"

    echo "Jails: $jails"
    echo "IPs  : $ips"
    echo "--------"
    echo ""
    [[ $jails == "all" ]] && jails=$jail_list

    for jail in $jails; do
        echo "$action IP(s) $ips for jail $jail"
        $sudo fail2ban-client set $jail $action $(echo $ips | sed "s/,/ /g")
    done' >>$script_name
  done

  ##blacklist
  echo '#!/bin/bash
    set -eu
    unalias -a
    jail=${1:-all}

    [[ $(whoami) != "root" && -n $(command -v sudo) ]] && sudo=sudo || sudo=""

    if [[ $jail == 'all' ]]
    then
      jail_list=($($sudo fail2ban-client status | grep -i 'list:' | cut -d ":" -f 2 | sed -E "s/,/ /g"))
      echo "all jails: ${jail_list[*]}"
      echo
      for jail_item in ${jail_list[*]};
      do
        echo "-------$jail_item-------"
        echo -e "\e[1m+++++ jail $jail_item +++++ \e[0m"
        $sudo fail2ban-client status ${jail_item}
        echo
      done
    else
      $sudo fail2ban-client status ${jail}
    fi

    echo
    echo -e "\e[1m++++++++++ \e[0m"
    echo "usage: blacklist [jail_name|all]  #default is all"

    echo "=====more commands example for manage IPs for jails=====
    banip [ip1,ip2]        : ban 1 IP or more IPs, eg, banip 8.8.8.8,9.9.9.9
    unbanip [ip1,ip2]      : unban 1 IP or more IPs
    unbanip all            : unban all IPs
    addignoreip [ip1 ip2]  : ignore 1 IP or more IPs
    delignoreip [ip1 ip2]  : delete a ignored IP"

    echo ""
    echo "more info of the above commands, run a command with -h or --help, eg, banip -h"
    ' >blacklist

  sed -i "1a #generated by fail2ban-config.sh at $(date +%F_%T)" blacklist

  for script in ${scripts[@]}; do
    install -m 755 $script $install_dir/
  done

  install -m 755 blacklist $install_dir/

  echo -e "Generate the following scripts: \n ${scripts[*]},blacklist"
}

#=====
command -v fail2ban-server || install_fail2ban
gen_jail_file
add_jails
gen_scripts

#=====
echo
echo -e "\e[1mGenerate jail file done. see $jail_file\e[0m"
echo
sleep 3
echo -e "-------- run 'blacklist' to see all jails status --------"
$sudo bash $install_dir/blacklist
